#region License

// Copyright (c) 2013, ClearCanvas Inc.
// All rights reserved.
// http://www.clearcanvas.ca
//
// This file is part of the ClearCanvas RIS/PACS open source project.
//
// The ClearCanvas RIS/PACS open source project is free software: you can
// redistribute it and/or modify it under the terms of the GNU General Public
// License as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// The ClearCanvas RIS/PACS open source project is distributed in the hope that it
// will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
// Public License for more details.
//
// You should have received a copy of the GNU General Public License along with
// the ClearCanvas RIS/PACS open source project.  If not, see
// <http://www.gnu.org/licenses/>.

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model
{
    using System;
    using System.Xml;
    using ClearCanvas.Enterprise.Core;
    using ClearCanvas.ImageServer.Enterprise;
    using ClearCanvas.ImageServer.Enterprise.Command;
    using ClearCanvas.ImageServer.Model.EntityBrokers;

    [Serializable]
    public partial class ServerPartitionAlternateAeTitle: ServerEntity
    {
        #region Constructors
        public ServerPartitionAlternateAeTitle():base("ServerPartitionAlternateAeTitle")
        {}
        public ServerPartitionAlternateAeTitle(
             ServerEntityKey _serverPartitionKey_
            ,String _aeTitle_
            ,Int32 _port_
            ,Boolean _enabled_
            ,Boolean _allowStorage_
            ,Boolean _allowKOPR_
            ,Boolean _allowRetrieve_
            ,Boolean _allowQuery_
            ):base("ServerPartitionAlternateAeTitle")
        {
            ServerPartitionKey = _serverPartitionKey_;
            AeTitle = _aeTitle_;
            Port = _port_;
            Enabled = _enabled_;
            AllowStorage = _allowStorage_;
            AllowKOPR = _allowKOPR_;
            AllowRetrieve = _allowRetrieve_;
            AllowQuery = _allowQuery_;
        }
        #endregion

        #region Public Properties
        [EntityFieldDatabaseMappingAttribute(TableName="ServerPartitionAlternateAeTitle", ColumnName="ServerPartitionGUID")]
        public ServerEntityKey ServerPartitionKey
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="ServerPartitionAlternateAeTitle", ColumnName="AeTitle")]
        public String AeTitle
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="ServerPartitionAlternateAeTitle", ColumnName="Port")]
        public Int32 Port
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="ServerPartitionAlternateAeTitle", ColumnName="Enabled")]
        public Boolean Enabled
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="ServerPartitionAlternateAeTitle", ColumnName="AllowStorage")]
        public Boolean AllowStorage
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="ServerPartitionAlternateAeTitle", ColumnName="AllowKOPR")]
        public Boolean AllowKOPR
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="ServerPartitionAlternateAeTitle", ColumnName="AllowRetrieve")]
        public Boolean AllowRetrieve
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="ServerPartitionAlternateAeTitle", ColumnName="AllowQuery")]
        public Boolean AllowQuery
        { get; set; }
        #endregion

        #region Static Methods
        static public ServerPartitionAlternateAeTitle Load(ServerEntityKey key)
        {
            using (var context = new ServerExecutionContext())
            {
                return Load(context.ReadContext, key);
            }
        }
        static public ServerPartitionAlternateAeTitle Load(IPersistenceContext read, ServerEntityKey key)
        {
            var broker = read.GetBroker<IServerPartitionAlternateAeTitleEntityBroker>();
            ServerPartitionAlternateAeTitle theObject = broker.Load(key);
            return theObject;
        }
        static public ServerPartitionAlternateAeTitle Insert(ServerPartitionAlternateAeTitle entity)
        {
            using (var update = PersistentStoreRegistry.GetDefaultStore().OpenUpdateContext(UpdateContextSyncMode.Flush))
            {
                ServerPartitionAlternateAeTitle newEntity = Insert(update, entity);
                update.Commit();
                return newEntity;
            }
        }
        static public ServerPartitionAlternateAeTitle Insert(IUpdateContext update, ServerPartitionAlternateAeTitle entity)
        {
            var broker = update.GetBroker<IServerPartitionAlternateAeTitleEntityBroker>();
            var updateColumns = new ServerPartitionAlternateAeTitleUpdateColumns();
            updateColumns.ServerPartitionKey = entity.ServerPartitionKey;
            updateColumns.AeTitle = entity.AeTitle;
            updateColumns.Port = entity.Port;
            updateColumns.Enabled = entity.Enabled;
            updateColumns.AllowStorage = entity.AllowStorage;
            updateColumns.AllowKOPR = entity.AllowKOPR;
            updateColumns.AllowRetrieve = entity.AllowRetrieve;
            updateColumns.AllowQuery = entity.AllowQuery;
            ServerPartitionAlternateAeTitle newEntity = broker.Insert(updateColumns);
            return newEntity;
        }
        #endregion
    }
}
