#region License

// Copyright (c) 2013, ClearCanvas Inc.
// All rights reserved.
// http://www.clearcanvas.ca
//
// This file is part of the ClearCanvas RIS/PACS open source project.
//
// The ClearCanvas RIS/PACS open source project is free software: you can
// redistribute it and/or modify it under the terms of the GNU General Public
// License as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// The ClearCanvas RIS/PACS open source project is distributed in the hope that it
// will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
// Public License for more details.
//
// You should have received a copy of the GNU General Public License along with
// the ClearCanvas RIS/PACS open source project.  If not, see
// <http://www.gnu.org/licenses/>.

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model
{
    using System;
    using System.Collections.Generic;
    using ClearCanvas.ImageServer.Model.EntityBrokers;
    using ClearCanvas.ImageServer.Enterprise;
    using System.Reflection;

[Serializable]
public partial class ExternalRequestQueueStatusEnum : ServerEnum
{
      #region Private Static Members
      private static readonly ExternalRequestQueueStatusEnum _Notification = GetEnum("Notification");
      private static readonly ExternalRequestQueueStatusEnum _Authorization = GetEnum("Authorization");
      private static readonly ExternalRequestQueueStatusEnum _Pending = GetEnum("Pending");
      private static readonly ExternalRequestQueueStatusEnum _InProgress = GetEnum("In Progress");
      private static readonly ExternalRequestQueueStatusEnum _Completed = GetEnum("Completed");
      private static readonly ExternalRequestQueueStatusEnum _Failed = GetEnum("Failed");
      #endregion

      #region Public Static Properties
      /// <summary>
      /// The request is a permanent notification request
      /// </summary>
      public static ExternalRequestQueueStatusEnum Notification
      {
          get { return _Notification; }
      }
      /// <summary>
      /// The request is a transient authorization request
      /// </summary>
      public static ExternalRequestQueueStatusEnum Authorization
      {
          get { return _Authorization; }
      }
      /// <summary>
      /// Pending
      /// </summary>
      public static ExternalRequestQueueStatusEnum Pending
      {
          get { return _Pending; }
      }
      /// <summary>
      /// In Progress
      /// </summary>
      public static ExternalRequestQueueStatusEnum InProgress
      {
          get { return _InProgress; }
      }
      /// <summary>
      /// The Queue entry is completed.
      /// </summary>
      public static ExternalRequestQueueStatusEnum Completed
      {
          get { return _Completed; }
      }
      /// <summary>
      /// The Queue entry has failed.
      /// </summary>
      public static ExternalRequestQueueStatusEnum Failed
      {
          get { return _Failed; }
      }

      #endregion

      #region Constructors
      public ExternalRequestQueueStatusEnum():base("ExternalRequestQueueStatusEnum")
      {}
      #endregion
      #region Public Members
      public override void SetEnum(short val)
      {
          ServerEnumHelper<ExternalRequestQueueStatusEnum, IExternalRequestQueueStatusEnumBroker>.SetEnum(this, val);
      }
      static public List<ExternalRequestQueueStatusEnum> GetAll()
      {
          return ServerEnumHelper<ExternalRequestQueueStatusEnum, IExternalRequestQueueStatusEnumBroker>.GetAll();
      }
      static public ExternalRequestQueueStatusEnum GetEnum(string lookup)
      {
          return ServerEnumHelper<ExternalRequestQueueStatusEnum, IExternalRequestQueueStatusEnumBroker>.GetEnum(lookup);
      }
      #endregion
}
}
