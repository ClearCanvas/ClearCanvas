<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExceptionFacilityAlreadyExist" xml:space="preserve">
    <value>A facility with code {0} already exists</value>
  </data>
  <data name="ExceptionImportEntityNameIdMismatch" xml:space="preserve">
    <value>Attempt to import entities with the same Id but different names</value>
  </data>
  <data name="ExceptionLocationAlreadyExist" xml:space="preserve">
    <value>A location with the same facility, building, floor, point of care, room and bed already exists</value>
  </data>
  <data name="ExceptionModalityAlreadyExist" xml:space="preserve">
    <value>A modality with ID {0} already exists</value>
  </data>
  <data name="ExceptionMrnAlreadyExists" xml:space="preserve">
    <value>A patient profile with MRN {0} {1} already exists</value>
  </data>
  <data name="ExceptionNoteCategoryAlreadyExist" xml:space="preserve">
    <value>A note category with name {0} already exists</value>
  </data>
  <data name="ExceptionPractitionerAlreadyExist" xml:space="preserve">
    <value>A practitioner with the name {0}, {1} already exists</value>
  </data>
  <data name="ExceptionStaffAlreadyExist" xml:space="preserve">
    <value>A staff with the name {0}, {1} already exists</value>
  </data>
  <data name="ExceptionFamilyNameMissing" xml:space="preserve">
    <value>A family name must be provided</value>
  </data>
  <data name="ExceptionNoStaffForUser" xml:space="preserve">
    <value>Current user must be associated with a Staff in order to perform this operation</value>
  </data>
  <data name="TextCheckedIn" xml:space="preserve">
    <value>Checked In</value>
  </data>
  <data name="ExceptionUserIDAlreadyExists" xml:space="preserve">
    <value>A user with user ID '{0}' already exists</value>
  </data>
  <data name="ExceptionPatientNotFound" xml:space="preserve">
    <value>Patient with MRN {0} {1} not found</value>
  </data>
  <data name="ExceptionProcedureTypeGroupNameAlreadyExists" xml:space="preserve">
    <value>A procedure type group with the name {0} already exists</value>
  </data>
  <data name="ExceptionProcedureTypeGroupNameRequired" xml:space="preserve">
    <value>A procedure type group name is required</value>
  </data>
  <data name="ExceptionWorklistNameAlreadyExists" xml:space="preserve">
    <value>A worklist with the name {0} already exists</value>
  </data>
  <data name="ExceptionWorklistNameRequired" xml:space="preserve">
    <value>A worklist name is required.</value>
  </data>
  <data name="ExceptionVerifyWithNoReport" xml:space="preserve">
    <value>The report content is required to verify this step</value>
  </data>
  <data name="ExceptionNoUser" xml:space="preserve">
    <value>Unable to find current user</value>
  </data>
  <data name="ExceptionExternalPractitionerAlreadyExist" xml:space="preserve">
    <value>A practitioner with the name {0}, {1} already exists</value>
  </data>
  <data name="ExceptionNoProtocolAssignmentStep" xml:space="preserve">
    <value>No scheduled Protocol Assignment steps exist for this procedure.  Either the assignment step was never created for this procedure, or it has been started by another user.</value>
  </data>
  <data name="ExceptionPasswordExpired" xml:space="preserve">
    <value>Password has expired.</value>
  </data>
  <data name="ExceptionOneDefaultContactPoint" xml:space="preserve">
    <value>Only one contact point can be set as the default.</value>
  </data>
  <data name="ExceptionCannedTextNameRequired" xml:space="preserve">
    <value>A canned text name is required</value>
  </data>
  <data name="ExceptionCannedTextCategoryRequired" xml:space="preserve">
    <value>A canned text category is required</value>
  </data>
  <data name="ExceptionIdenticalCannedTextExist" xml:space="preserve">
    <value>An identical canned text entry already exists for {0}</value>
  </data>
  <data name="ExceptionFailedToDelete" xml:space="preserve">
    <value>Unable to delete {0}.  The most likely reason is that the item is referenced by another item in the system.</value>
  </data>
  <data name="ExceptionUnableToDeleteHardEnumeration" xml:space="preserve">
    <value>Hard enumeration cannot be deleted.</value>
  </data>
  <data name="ExceptionProcedureNotCheckedIn" xml:space="preserve">
    <value>Please check in the patient for this procedure and try again.</value>
  </data>
  <data name="ExceptionUserNotAuthorized" xml:space="preserve">
    <value>User not authorized.</value>
  </data>
  <data name="MessageDocumentationIncomplete" xml:space="preserve">
    <value>Documentation is not completed.</value>
  </data>
  <data name="MessageNotAllProceduresPerformed" xml:space="preserve">
    <value>Not all ordered procedures have been performed.</value>
  </data>
  <data name="ExceptionProcedurePlanXmlRequired" xml:space="preserve">
    <value>A procedure plan XML is required.</value>
  </data>
  <data name="ExceptionMaximumWorklistsReachedForStaff" xml:space="preserve">
    <value>You have reached the maximum number of worklists that can be defined for a staff.</value>
  </data>
  <data name="ExceptionMaximumWorklistsReachedForStaffGroup" xml:space="preserve">
    <value>You have reached the maximum number of worklists that can be defined for a staff group.</value>
  </data>
  <data name="ExceptionContactPointsHaveActiveOrders" xml:space="preserve">
    <value>The following contact points cannot be deactivated because there are active orders for which the contact point is a result recipient: {0}.
Please use the "Merge Contact Points" tool to merge the contact point(s) with an alternate active contact point instead.</value>
  </data>
  <data name="MessageDestinationMergeOrderNote" xml:space="preserve">
    <value>Auto-generated note.  {0} were merged into this order.</value>
  </data>
  <data name="MessageSourceMergeOrderNote" xml:space="preserve">
    <value>Auto-generated note.  This order was merged into {0}.</value>
  </data>
  <data name="MessageMultipleInformationAuthoritiesNotSupported" xml:space="preserve">
    <value>The system is not configured to support multiple information authorities.  All facilities must be assigned to the same information authority.</value>
  </data>
  <data name="InvalidRequest_InvalidEnumerationName" xml:space="preserve">
    <value>Invalid enumeration name.</value>
  </data>
  <data name="InvalidRequest_EnumerationValueCannotInsertAfterSelf" xml:space="preserve">
    <value>Value cannot be inserted after itself.</value>
  </data>
  <data name="InvalidRequest_UserAlreadyAssociatedWithStaff" xml:space="preserve">
    <value>Staff cannot be associated with user {0} because this user is already associated to staff {1}</value>
  </data>
  <data name="InvalidRequest_ReportCannotBeSubmittedForProcedure" xml:space="preserve">
    <value>Report cannot be submitted for this procedure.  It may have been submitted previously.</value>
  </data>
  <data name="CancelOrderWarning_OrderAlreadyTerminated" xml:space="preserve">
    <value>This order cannot be cancelled because it has already been completed or otherwise terminated.</value>
  </data>
  <data name="CancelOrderWarning_OrderPerformedMayHaveInProgressReports" xml:space="preserve">
    <value>This order has been performed and may have reports in progress.</value>
  </data>
  <data name="InvalidRequest_OrderInStatusCannotBeReplaced" xml:space="preserve">
    <value>Orders with a status of '{0}' cannot be replaced.</value>
  </data>
  <data name="InvalidRequest_DowntimeOrdersCannotBeReplaced" xml:space="preserve">
    <value>Downtime orders cannot be replaced.  You must cancel the order and create a new one.</value>
  </data>
  <data name="InvalidRequest_CannotEnterOrderWithoutVisits" xml:space="preserve">
    <value>The order cannot be entered because the patient does not have any visits at {0}.</value>
  </data>
  <data name="InvalidRequest_InvalidDowntimeAccessionNumber" xml:space="preserve">
    <value>Invalid downtime accession number.</value>
  </data>
  <data name="InvalidRequest_CannotModifyProcedureType" xml:space="preserve">
    <value>Order modification must not modify the type of a requested procedure.</value>
  </data>
  <data name="InvalidRequest_VisitRequired" xml:space="preserve">
    <value>A visit is required.</value>
  </data>
  <data name="InvalidRequest_NoOrdersToUnmerge" xml:space="preserve">
    <value>This order does not have any orders to un-merge.</value>
  </data>
  <data name="InvalidRequest_SupervisorIsRequired" xml:space="preserve">
    <value>A supervisor is required.</value>
  </data>
</root>